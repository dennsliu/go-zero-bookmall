// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"

)
var (
	bookFieldNames          = builder.RawFieldNames(&Book{})
	bookRows                = strings.Join(bookFieldNames, ",")
	bookRowsExpectAutoSet   = strings.Join(stringx.Remove(bookFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	bookRowsWithPlaceHolder = strings.Join(stringx.Remove(bookFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBookIdPrefix  = "cache:book:id:"
	cacheBookSkuPrefix = "cache:book:sku:"
)

type (
	bookModel interface {
		Insert(ctx context.Context, data *Book) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Book, error)
		FindOneBySku(ctx context.Context, sku string) (*Book, error)
		Update(ctx context.Context, newData *Book) error
		Delete(ctx context.Context, id int64) error
		}

	defaultBookModel struct {
		sqlc.CachedConn
		table string
	}

	Book struct {
		Id          int64  `db:"id"`
		Plu         string `db:"plu"`         // plu
		Sku         string `db:"sku"`         // sku
		Name        string `db:"name"`        // name
		Image       string `db:"image"`       // image
		Description string `db:"description"` // description
		InStocked   string `db:"in_stocked"`  // in stocked
	}
)

func newBookModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBookModel {
	return &defaultBookModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`book`",
	}
}

func (m *defaultBookModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bookIdKey := fmt.Sprintf("%s%v", cacheBookIdPrefix, id)
	bookSkuKey := fmt.Sprintf("%s%v", cacheBookSkuPrefix, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bookIdKey, bookSkuKey)
	return err
}

func (m *defaultBookModel) FindOne(ctx context.Context, id int64) (*Book, error) {
	bookIdKey := fmt.Sprintf("%s%v", cacheBookIdPrefix, id)
	var resp Book
	err := m.QueryRowCtx(ctx, &resp, bookIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bookRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookModel) FindOneBySku(ctx context.Context, sku string) (*Book, error) {
	bookSkuKey := fmt.Sprintf("%s%v", cacheBookSkuPrefix, sku)
	var resp Book
	err := m.QueryRowIndexCtx(ctx, &resp, bookSkuKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `sku` = ? limit 1", bookRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sku); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookModel) Insert(ctx context.Context, data *Book) (sql.Result, error) {
	bookIdKey := fmt.Sprintf("%s%v", cacheBookIdPrefix, data.Id)
	bookSkuKey := fmt.Sprintf("%s%v", cacheBookSkuPrefix, data.Sku)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, bookRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Plu, data.Sku, data.Name, data.Image, data.Description, data.InStocked)
	}, bookIdKey, bookSkuKey)
	return ret, err
}

func (m *defaultBookModel) Update(ctx context.Context, newData *Book) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bookIdKey := fmt.Sprintf("%s%v", cacheBookIdPrefix, data.Id)
	bookSkuKey := fmt.Sprintf("%s%v", cacheBookSkuPrefix, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bookRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Plu, newData.Sku, newData.Name, newData.Image, newData.Description, newData.InStocked, newData.Id)
	}, bookIdKey, bookSkuKey)
	return err
}

func (m *defaultBookModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBookIdPrefix, primary)
}

func (m *defaultBookModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bookRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBookModel) tableName() string {
	return m.table
}

